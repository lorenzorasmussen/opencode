name: Code Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  quality-check:
    name: Quality Assurance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        id: eslint
        run: npm run lint || echo "lint_failed=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Run Prettier check
        id: prettier
        run: npm run format:check || echo "format_failed=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Run cspell
        id: cspell
        run: npx cspell "**/*.{js,ts,tsx,md,json}" --config .cspell.json || echo "cspell_failed=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Run tests
        id: tests
        run: npm test || echo "test_failed=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Generate quality report
        uses: actions/github-script@v7
        env:
          ESLINT_RESULT: ${{ steps.eslint.outputs.lint_failed }}
          PRETTIER_RESULT: ${{ steps.prettier.outputs.format_failed }}
          CSPELL_RESULT: ${{ steps.cspell.outputs.cspell_failed }}
          TEST_RESULT: ${{ steps.tests.outputs.test_failed }}
        with:
          script: |
            const eslintFailed = process.env.ESLINT_RESULT === 'true';
            const prettierFailed = process.env.PRETTIER_RESULT === 'true';
            const cspellFailed = process.env.CSPELL_RESULT === 'true';
            const testFailed = process.env.TEST_RESULT === 'true';

            const report = `# Code Quality Report

## Summary
- **Date**: ${new Date().toISOString()}
- **Commit**: ${context.sha}
- **Branch**: ${context.ref}

## Results
| Check | Status |
|-------|--------|
| ESLint | ${eslintFailed ? '❌ Failed' : '✅ Passed'} |
| Prettier | ${prettierFailed ? '❌ Failed' : '✅ Passed'} |
| CSpell | ${cspellFailed ? '❌ Failed' : '✅ Passed'} |
| Tests | ${testFailed ? '❌ Failed' : '✅ Passed'} |

## Details
${eslintFailed ? '- ESLint found code quality issues\n' : ''}
${prettierFailed ? '- Code formatting needs attention\n' : ''}
${cspellFailed ? '- Spelling errors detected\n' : ''}
${testFailed ? '- Tests are failing\n' : ''}

---
*Generated by GitHub Actions*
            `;

            // Write report to file
            require('fs').writeFileSync('quality-report-${new Date().toISOString().split('T')[0]}-${Date.now()}.md', report);

      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report-*.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          ESLINT_RESULT: ${{ steps.eslint.outputs.lint_failed }}
          PRETTIER_RESULT: ${{ steps.prettier.outputs.format_failed }}
          CSPELL_RESULT: ${{ steps.cspell.outputs.cspell_failed }}
          TEST_RESULT: ${{ steps.tests.outputs.test_failed }}
        with:
          script: |
            const eslintFailed = process.env.ESLINT_RESULT === 'true';
            const prettierFailed = process.env.PRETTIER_RESULT === 'true';
            const cspellFailed = process.env.CSPELL_RESULT === 'true';
            const testFailed = process.env.TEST_RESULT === 'true';

            const allPassed = !eslintFailed && !prettierFailed && !cspellFailed && !testFailed;

            const body = allPassed
              ? '✅ **All quality checks passed!** Great job!'
              : `⚠️ **Quality checks completed with issues:**

${eslintFailed ? '• ESLint found code quality issues\n' : ''}
${prettierFailed ? '• Code formatting needs attention\n' : ''}
${cspellFailed ? '• Spelling errors detected\n' : ''}
${testFailed ? '• Tests are failing\n' : ''}

Please review and fix the issues before merging.`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });