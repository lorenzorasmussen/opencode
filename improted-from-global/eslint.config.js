/**
 * ESLint Flat Config - 2025 Standard
 * Auto-generated by /lint command
 *
 * Strictness: MEDIUM-STRICT
 * Philosophy: Catch bugs, enforce best practices, allow flexibility
 */

import js from '@eslint/js';
import globals from 'globals';
import tseslint from 'typescript-eslint';
import prettierConfig from 'eslint-plugin-prettier/recommended';

// Conditional: React plugin (if detected)
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';

export default tseslint.config([
  // Ignore build outputs and dependencies
  {
    ignores: [
      'dist/',
      'build/',
      'node_modules/',
      'coverage/',
      '**/*.d.ts',
      '.next/',
      'out/',
      'vite.config.ts',
    ],
  },

  // Base JavaScript rules
  {
    files: ['**/*.{js,mjs,cjs,jsx}'],
    extends: [js.configs.recommended],
    languageOptions: {
      ecmaVersion: 2024,
      sourceType: 'module',
      globals: {
        ...globals.browser,
        ...globals.node,
        ...globals.es2024,
      },
    },
    rules: {
      // === MEDIUM-STRICT CONFIGURATION ===

      // Code Quality (Errors)
      'no-undef': 'error',
      'no-unused-vars': [
        'warn',
        {
          argsIgnorePattern: '^_',
          varsIgnorePattern: '^_',
          destructuredArrayIgnorePattern: '^_',
        },
      ],
      'no-constant-condition': ['error', { checkLoops: false }],
      'no-empty': ['error', { allowEmptyCatch: true }],

      // Best Practices (Warnings - Medium Enforcement)
      'no-console': ['warn', { allow: ['warn', 'error', 'info'] }],
      'prefer-const': 'warn',
      'no-var': 'error',
      eqeqeq: ['warn', 'smart'], // Allow == for null checks
      curly: ['warn', 'multi-line', 'consistent'],
      'no-throw-literal': 'error',
      'no-duplicate-imports': 'warn',
      'no-useless-concat': 'warn',
      'prefer-template': 'warn',

      // Async/Promise handling (Important)
      'no-async-promise-executor': 'error',
      'require-atomic-updates': 'warn',

      // Disabled (Too strict for medium config)
      'no-magic-numbers': 'off',
      'max-lines': 'off',
      'max-params': 'off',
    },
  },

  // TypeScript rules
  {
    files: ['**/*.{ts,tsx}'],
    extends: [...tseslint.configs.recommended, ...tseslint.configs.recommendedTypeChecked],
    languageOptions: {
      parser: tseslint.parser,
      parserOptions: {
        project: true,
        tsconfigRootDir: import.meta.dirname,
      },
    },
    rules: {
      // === MEDIUM-STRICT TYPESCRIPT ===

      // Type Safety (Critical)
      '@typescript-eslint/no-explicit-any': 'warn', // Warn, not error
      '@typescript-eslint/no-unsafe-assignment': 'warn',
      '@typescript-eslint/no-unsafe-call': 'warn',
      '@typescript-eslint/no-unsafe-member-access': 'warn',
      '@typescript-eslint/no-unsafe-return': 'warn',

      // Variable usage
      '@typescript-eslint/no-unused-vars': [
        'warn',
        {
          argsIgnorePattern: '^_',
          varsIgnorePattern: '^_',
          caughtErrorsIgnorePattern: '^_',
        },
      ],

      // Promise handling (Strict - prevents bugs)
      '@typescript-eslint/no-floating-promises': 'error',
      '@typescript-eslint/no-misused-promises': 'error',
      '@typescript-eslint/await-thenable': 'error',

      // Code quality
      '@typescript-eslint/no-unnecessary-condition': 'warn',
      '@typescript-eslint/no-unnecessary-type-assertion': 'warn',
      '@typescript-eslint/prefer-nullish-coalescing': 'warn',
      '@typescript-eslint/prefer-optional-chain': 'warn',
      '@typescript-eslint/prefer-readonly': 'warn',

      // Disabled (too strict)
      '@typescript-eslint/explicit-function-return-type': 'off',
      '@typescript-eslint/explicit-module-boundary-types': 'off',
      '@typescript-eslint/no-non-null-assertion': 'warn', // Allow with caution
      '@typescript-eslint/strict-boolean-expressions': 'off',
    },
  },

  // React-specific rules (if React detected)
  {
    files: ['**/*.{jsx,tsx}'],
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      // React Hooks (Strict - prevents common bugs)
      ...reactHooks.configs.recommended.rules,
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'warn', // Medium: warn vs error

      // React Refresh (for Vite)
      'react-refresh/only-export-components': ['warn', { allowConstantExport: true }],
    },
  },

  // Prettier integration (must be last)
  prettierConfig,
]);
